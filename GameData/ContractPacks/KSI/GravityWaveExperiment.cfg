CONTRACT_TYPE
{
	// Unique name of the contract
	name = LISA1

	// determine how contracts in our group will be sorted (alphabetic sort)
	sortKey = 01.HomeWorld // make sure the homeworld contract is first.
	
	// The title of the contract, which is displayed in Mission Control
    // when a player is selecting a mission.  Also gets displayed in the
    // contract app. 
	// @targetBody is a variable that will be replaced by the required body 
    title = #KSI_contracts_LISA1title // Search for gravity waves above @targetBody

    // Generic version of the contract title that is displayed in Mission
    // Control when no contract is currently generated.  This is needed 
	// because of the @HomeWorld variable in the title
    genericTitle = #KSI_contracts_LISA1genericTitle // Search for gravity waves above home world

    // The CONTRACT_GROUP node (in KSIGroup.cfg) which defines how our 
	// contracts are grouped in the first tab of Contract Configurator
    group = KerbalScienceInnovations

    // A more detailed description of the contract.
	description = #KSI_contracts_LISA1description // Launch a satellite with a gravity wave sensor into a high polar orbit near the edge of @targetBody 's SOI and run the experiment to listen for gravity wave events.
	
	// Needed because of @targetBody in the description
	genericDescription = #KSI_contracts_LISA1genericDescription // Launch a satellite with a gravity wave sensor into a high polar orbit near the edge of our home world's SOI and run the experiment to listen for gravity wave events.

    // Contract notes are displayed in mission control.  Use it to give 
    // any special instructions.
    notes = #KSI_contracts_notes //  Complete the following:

    // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = #KSI_contracts_synopsis // Search for gravity waves.

    // The completedMessage is the message that is displayed when the
    // contract completes.
    completedMessage = #KSI_contracts_LISA1completed // You have collected a lot of data for our scientists to analyse.

    // Agent (agency).  If not populated, the agent from the contract group
    // will be used.  If there is no group or no agent on the group, a
    // random agent will be selected.
    agent = KSI

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 5.0 and 100.0 days, respectively
    minExpiry = 5.0
    maxExpiry = 10.0

    // Contract deadline in days.  Default is no deadline. This controls how long 
	// the player has to complete the contract after accepting it.
    deadline = 1000

    // Controls for whether a contract can be declined or cancelled, default
    // is true for both
    cancellable = true
    declinable = true

    // When set to true, this contract is automatically accepted when
    // offered.  Use it to make a contract like the stock World-Firsts
    // Record contracts.
    // Default = false
    autoAccept = false

    // Prestige.  If not specified, this contract type will be available at
    // any prestige level.  Otherwise, locked to the level specified.  Can
    // be specified multiple times.
    // Values from Contract.ContractPrestige:
    //     Trivial (one star)
    //     Significant (two stars)
    //     Exceptional (three stars)
    prestige = Significant

    // Target Celestial body - controls where the contract must be
    // completed
	// HomeWorld() finds the name of the home planet (e.g. Kerbin in stock 
	// or Earth in RealSolarSystem)
    targetBody = HomeWorld()

    // The maximum number of times this contract type can be completed (0
    // being unlimited).
    // Default = 0
    maxCompletions = 1

    // The maximum instances of this contract that can be active at one
    // time.
    // Default = 4 (unless maxCompletions is set).
    maxSimultaneous = 1

    // Contract rewards.  Note that advanceFunds are automatically added to the
    // failureFunds.
    rewardScience = 25.0
    rewardReputation = 5.0
    rewardFunds = 20000.0 + Random(0.0, 20000.0)
    failureReputation = 10.0
    failureFunds = 40000.0
    advanceFunds = 2000.0

    // DATA nodes are special nodes that provide storage for contract values
	// not needed for this contract

    // The PARAMETER nodes define steps the player must complete to finish the
	// contract
    PARAMETER
    {
		// defines all the conditions the vessel must meet to complete the contract
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = #KSI_contracts_launchsatellite // Launch a science satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = #KSI_contracts_newVessel // launch a new vessel
		}

		PARAMETER
		{
			// check that vessel contains our experiment part
			name = PartValidation
			type = PartValidation
			part = KSIGravityWaveDetector 
			title = #KSI_contracts_partValidation // Gravity Wave Detector must be available in tech tree
		}

		// define sequence of steps to take
		PARAMETER
		{
			name = Sequence
			type = Sequence

			PARAMETER
			{
				// check that it reaches the right orbit
				name = Orbit
				type = Orbit
				title = #KSI_contracts_orbit

				minInclination = 87.5 // polar orbit ± 2.5°
				maxInclination = 92.5

				minPeA = Round(@/targetBody.SphereOfInfluence() * 0.9, 1000000 ) // 90% of SOI
				minApA = Round(@/targetBody.SphereOfInfluence() * 0.9, 1000000 )
				maxApA = Round(@/targetBody.SphereOfInfluence(), 1000000 )
			}
			
			PARAMETER
			{
				// require the gravity wave experiment to be run
				name = CollectScience
				type = CollectScience
				title = #KSI_contracts_LISArunExperiment // Run the gravity wave experiment and wait 7 days before collecting the results
				targetBody = HomeWorld()
				situation = InSpaceHigh
				experiment = KSIGravityWaveExperiment
				recoveryMethod = RecoverOrTransmit // player must either transmit result or return it to KSC
			}
		}
    }

    // The REQUIREMENT nodes define conditions that must be met before a 
	// contract can be offered
    REQUIREMENT
    {
		// player must have orbited the home world
        name = OrbitHomeWorld
        type = Orbit
		targetBody = HomeWorld()
    }
	
	REQUIREMENT
	{
		// must have researched (and unlocked) the gravity wave sensor
		name = PartUnlocked
		type = PartUnlocked
		part = KSIGravityWaveDetector // the part name
	}

    // The BEHAVIOUR nodes adds additional special contract level behaviour.
	// not needed for this contract
}
	