CONTRACT_TYPE
{
	name = DMC1
	sortkey = 04.DMC
	title = #KSI_contracts_DMC1title
	genericTitle = #KSI_contracts_DMC1genericTitle
	
    group = KerbalScienceInnovations
    agent = KSI

	description = #KSI_contracts_DMC1description 
	genericDescription = #KSI_contracts_DMC1genericDescription

    notes = #KSI_contracts_notes // Complete the following:
    synopsis = #KSI_contracts_DMCsynopsis // Collect dark matter.

    completedMessage = #KSI_contracts_DMCcompleted

    minExpiry = 10.0
    maxExpiry = 20.0
    deadline = 426 * 10 // 10 years

    cancellable = true
    declinable = true

    autoAccept = false

    prestige = Exceptional // 3 star

    targetBody = Sun()

    maxCompletions = 0 // unlimited

    maxSimultaneous = 1

    rewardScience = 35.0 + Random(0.0, 15.0)
    rewardReputation = 30.0
    rewardFunds = 200000.0 + Random(0.0, 50000.0)
    failureReputation = 50.0
    failureFunds = 200000.0
    advanceFunds = 5000 + Random(0, 2000)

	PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = #KSI_contracts_launchSolarSatellite // Launch a solar science satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = #KSI_contracts_newVessel // launch a new vessel
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			part = KSI_DMCollector 
			title = #KSI_contracts_DMCpartValidation // Gravity Wave Detector must be available in tech tree
		}

		// define sequence of steps to take
		PARAMETER
		{
			name = Sequence
			type = Sequence

			PARAMETER
			{
				// check that it reaches the right orbit
				name = Orbit
				type = Orbit

				maxPeA = Sun().SpaceAltitudeThreshold()

				title = #KSI_contracts_orbit
			}
			
			PARAMETER
			{
				// require the DMC experiment to be run
				name = CollectScience
				type = CollectScience
				title = #KSI_contracts_DMCrunExperiment // Collect some dark matter
				targetBody = Sun()
				situation = InSpaceLow
				experiment = KSIdarkMatterCollectorExperiment
				recoveryMethod = Recover // player must either transmit result or return it to KSC
			}
		}
    }

	REQUIREMENT
    {
        name = OrbitSun
        type = Orbit
		targetBody = Sun()
    }
	
	REQUIREMENT
	{
		// must have researched (and unlocked) the gravity wave sensor
		name = PartUnlocked
		type = PartUnlocked
		part = KSI_DMCollector // the part name
	}

	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = DMC1
		cooldownDuration = 50d
	}
}